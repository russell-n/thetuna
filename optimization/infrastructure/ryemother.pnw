The Rye Mother
==============

<<name='imports', echo=False>>=
# python standard library
import os
import importlib
import inspect
import pkg_resources
import pkgutil
@

The `Rye Mother <http://www.pitt.edu/~dash/gerchange.html#GrimmRyeMother>`_ gathers children.

.. figure:: figures/troll_changeling.jpg
   :align: center

   Source: `Wikipedia <http://en.wikipedia.org/wiki/File:En_kv%C3%A4ll_vid_midsommartid_gingo_de_med_Bianca_Maria_djupt_in_i_skogen2.jpg>`_

Contents:

   * :ref:`The Entry Points <ape-commoncode-rye-mother-entry-points>`
   * :ref:`The RyeMother Class <ape-commoncode-rye-mother-class>`
   * :ref:`Dependencies <ape-commoncode-rye-mother-dependecies>`
   * :ref:`What it does <ape-commoncode-rye-mother-algorithm>`

.. _ape-commoncode-rye-mother-entry-points:
   
The Entry Points
----------------

The RyeMother uses entry points defined in the `setup.py` file. The entry_points use an ini-like format with the form::

    [group]
    name = module:object

In this case, the RyeMother wants to search the folder for class-definitions so the `object` is left out. As a concrete example, for the ape subcommands, the entry points would look like this::

      entry_points = """
        [ape.subcommands]
        ape_subcommands = ape.interface.arguments
        """

.. note:: The actual `setup.py` has other entries, this is just the sub-commands entry.

The `[ape.subcommands]` defines a group name, you can put multiple entries under it for other modules or objects. `ape_subcommands` is the name that is used to reference the `ape.interface.arguments` module in the code.

.. _ape-commoncode-rye-mother-dependecies:

Dependencies
------------

The RyeMother relies on several python modules.

.. csv-table:: Dependencies
   :header: Package, Source

   `pkgutil <https://docs.python.org/2/library/pkgutil.html>`_, python standard library
   `importlib <https://docs.python.org/2.7/library/importlib.html>`_, python standard library
   `os.path <https://docs.python.org/2/library/os.path.html>`_, python standard library
   `inspect <https://docs.python.org/2/library/inspect.html>`_, python standard library
   `pkg_resources <https://pythonhosted.org/setuptools/pkg_resources.html>`_ , setuptools

The methods used:

.. currentmodule:: pkg_resources
.. autosummary::
   :toctree: api

   pkg_resources.load_entry_point

.. currentmodule:: os.path
.. autosummary::
   :toctree: api

   dirname

.. currentmodule:: pkgutil
.. autosummary::
   :toctree: api

   iter_modules

.. currentmodule:: inspect
.. autosummary::
   :toctree: api

   getmembers

.. _ape-commoncode-rye-mother-algorithm:

What the RyeMother Does
-----------------------

The RyeMother's __call__ method converts the parameters to a dictionary of class definition objects.

.. '

.. csv-table:: Call Parameters
   :header: Parameter, Description

   `parent`, The Base Class of the child-classes that we want to import
   `group`, Group name in the `entry_points` variable in `setup.py` (see :ref:`Entry Points <ape-commoncode-rye-mother-entry-points>`)
   `name`, name of the module in the `entry_points` variable in `setup.py`
   `keyfunction`, function to transform the keys of the dictionary (default uses the actual class names)

The idea here is that to identify the classes that we're interested in we'll define them as children of a specific class.

.. uml::

   Parent <|-- Child_1
   Parent <|-- Child_2
   Parent <|-- Child_3

The `parent` parameter for the RyeMother is the actual class definition object. For example, if the user of the RyeMother did the following::

   from ape.interface.arguments import BaseArguments

Then `BaseArguments` is what would be passed to the call and all the classes that inherit from it will be returned. If we defined `ape.subcommands` as the group and  `ape_subcommands` as the name in the `setup.py` `entry_points` variable as mentioned :ref:`earlier <ape-commoncode-rye-mother-entry-points>`, and we wanted to retrieve the `Run` class, we could use something like this::

   mother = RyeMother()
   children = mother(parent=BaseArguments, group='ape.subcommands', name='ape_subcommands')
   Run = children['Run']
   run_instance = Run()

The `keyfunction` is used to change the keys in the dictionary. One of the reasons that the RyeMother was created was so that classes could be auto-discovered and displayed for the users. Since the human-readable name might not always match the class-name, rather than forcing the classes to change their names, the `keyfunction` can be used to make a limited tranformation of the strings used as the keys.

To make them lower-cased you could use something like::

   keyfunction = lambda s: getattr(s, 'lower')()

The use of the gettattr might not seem intuitive, but since they recommend using string methods, I figured it'd be the best way. Another common transform might occur if the class names have a common suffix. Say they all have the suffix 'Arguments' and you don't want that in the dictionaries keys. You could do something like::

   keyfunction = lambda s: getattr(s, 'rstrip')('Arguments')   

This is the main path for the ``__call__``:

    #. Create a dictionary called `children`
    #. Import the package (folder) that contains the modules (files) that have the class definitions we want
    #. Get the package's directory
    #. Create a `prefix` using the module's package name
    #. Generate a list of module names within the imported module's directory and add the prefix to them (`<prefix>.<name>`)
    #. Import each of the module names from the previous step
    #. For each of the modules import all members that are children of the parent base-class
    #. For each member, if `keyfunction` is defined, transform its name
    #. For each member, add it to the children dictionary, using the name as a key and the class-definition object as the value

.. _ape-commoncode-rye-mother-class:

The RyeMother Class
-------------------

.. currentmodule:: ape.commoncode.ryemother 
.. autosummary::
   :toctree: api

   RyeMother
   RyeMother.__call__

.. note: In the event that the RyeMother needs to be used multiple time, the parameters can be set when it's constructed, but if they are passed into the call, then the passed-in parameters will override the instiation parameters.

.. '

<<name='RyeMother', echo=False>>=
class RyeMother(object):
    """
    A gatherer of child classes
    """
    def __init__(self, exclusions='index.py __init__.py'.split(),
                 parent=None,
                 base_package=None,
                 group=None, name=None,
                 module=None,
                 keyfunction=None):
        """
        Rye Mother constructor

        :param:
        
         - `exclusions`: list of filenames to ignore
         - `parent`: class definiton for parent of classes to import
         - `base_package`: the top-level package (e.g. 'ape')
         - `group`: group-name from the setup.py entry_points
         - `name`: name of entry in group
         - `module`: name of module (to use instead of an entry point)
         - `keyfunction`: a function to transform the dictionary keys
        """
        self.parent = parent
        self.group = group
        self.name = name
        self.module = module
        self.exclusions = exclusions
        self.keyfunction = keyfunction
        self._base_package = base_package
        return

    @property
    def base_package(self):
        """
        The name of the top-level package
        """
        if self._base_package is None:
            self._base_package = __package__.split('.')[0]
        return self._base_package
        
    def __call__(self, parent=None, group=None, name=None,
                 modulename=None, keyfunction=None):
        """
        The main interface

        :param:

         - `parent`: parent class whose children to gather
         - `group`: [<group.name>] entry from setup.py entry_points
         - `name`: name given in the entry_point
         - `modulename`: name of a module (if this is given, group and name will be ignored)
         - `keyfunction`: function to transform the keys of the dict

        :return: dict of name:class definition
        """
        if parent is None:
            parent = self.parent
        if group is None:
            group = self.group            
        if name is None:
            name = self.name
        if keyfunction is None:
            if self.keyfunction is not None:
                keyfunction = self.keyfunction
            else:
                keyfunction = lambda s: s

        if modulename is None:
            return self.from_entry_point(parent, group, name, keyfunction)
        else:
            return self.from_module_name(parent=parent, modulename=modulename, keyfunction=keyfunction)
        return

    def from_module_name(self, parent, modulename, keyfunction):
        """
        Retrieves the definitions using the modulename (dot-notation: ape.plugins)

        :param:

         - `parent`: parent class whose children to gather
         - `modulename`: name of a module (if this is given, group and name will be ignored)       
         - `keyfunction`: function to transform the keys of the dict

        :return: dict of name:class definition
        """
        children = {}
        def is_child(candidate):
            # this is a filter for inspect.getmembers
            # returns True if candidate object has the correct parent class
            return hasattr(candidate, '__base__') and candidate.__base__ is parent

        module = importlib.import_module(modulename)
        members = inspect.getmembers(module,
                                    predicate=is_child)
        for member in members:
                name, definition = member
                children[name] = definition
        return children

    def from_entry_point(self, parent, group, name, keyfunction):
        """
        Retrieves the definitions using an entry-point
        
        :param:

         - `parent`: parent class whose children to gather
         - `group`: [<group.name>] entry from setup.py entry_points
         - `name`: name given in the entry_point
         - `keyfunction`: function to transform the keys of the dict

        :return: dict of name:class definition
        """        
        def is_child(candidate):
            # this is a filter for inspect.getmembers
            # returns True if candidate object has the correct parent class
            return hasattr(candidate, '__base__') and candidate.__base__ is parent

        children = {}

        module = pkg_resources.load_entry_point(self.base_package, group, name)
        dirname = os.path.dirname(module.__file__)
        prefix = module.__name__ + '.'
        names = (name for loader, name, is_pkg in pkgutil.iter_modules([dirname],prefix) if not is_pkg)
        modules = (importlib.import_module(name) for name in names)

        for module in modules:
            # members is a list of children in the module
            members = inspect.getmembers(module, predicate=is_child)
            for member in members:
                # member is a name, class definition tuple
                name, definition = member
                name = keyfunction(name)
                children[name] = definition
        return children
# end RyeMother    
@
