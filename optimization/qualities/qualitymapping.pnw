The Quality Mapping
===================

This is a generalization of the `Quality` function used by the optimizers to assess the quality of a candidate solution. In order to generalize it I'm making the function that maps an input to an output a parameter, along with the domain. The domain is only needed if the `ideal` needs to be calculated. If it is set or None is used, then only the mapping-function is needed. If the mapping is a real-valued one, then the `image` can be calculated and the `ideal` taken from it.

.. '

.. _optimization-datamappings-qualitymapping-QualityMapping:

QualityMapping Class
--------------------

.. currentmodule:: optimization.datamappings.qualitymapping
.. autosummary::
   :toctree: api

   QualityMapping
   QualityMapping.ideal
   QualityMapping.image
   QualityMapping.__call__

<<name='QualityMapping', echo=False>>=
class QualityMapping(object):
    """
    A QualityMapping from a domain to an image (range)
    """
    def __init__(self, mapping, domain=None, ideal=None,
                 maxima=True):
        """
        QualityMapping constructor

        :param:

         - `mapping`: function to map inputs to an output (Quality function)
         - `domain`: vector of valid inputs for the mapping-function
         - `ideal`: Value that for the ideal solution
         - `maxima`: if true and ideal is calculated, use max value, else min-value
        """
        self.domain = domain
        self.mapping = mapping
        self._ideal = ideal
        self.maxima = maxima
        self._image = None
        self.quality_checks = 0
        return

    @property
    def ideal(self):
        """
        The ideal value (if it is knowable)
        """
        if self._ideal is None and self.domain is not None:
            if self.maxima:
                self._ideal = self.image.max()
            else:
                self._ideal = self.image.min()
        return self._ideal

    ideal_solution = ideal

    @ideal.setter
    def ideal(self, ideal):
        """
        sets the ideal value

        :param:

         - `ideal`: stopping-value
        """
        self._ideal = ideal
        return self._ideal

    @property
    def image(self):
        """
        The image (range) for the domain and mapping-function

        :precondition: domain has valid input for mapping-function        
        """
        if self._image is None and self.domain is not None:
            self._image = self.mapping(self.domain)
        return self._image

    def __call__(self, argument):
        """
        maps the argument to the image

        :param:

         - `argument`: valid input for the mapping function

        :return: mapping(argument)
        """
        self.quality_checks += 1
        if argument.output is None:
            argument.output = self.mapping(argument.inputs)
        return argument.output

    def reset(self):
        """
        Resets counters 
        """
        self.quality_checks = 0
        return
# end QualityMapping    
@

The Ideal Value
---------------

The Ideal Value (``ideal``) can be used as a stopping condition if it is known or calculatable from the mapping-function and domain. Using *I* to mean :math:`ideal \neq None` and *D* to mean :math:`domain \neq None` the ``ideal`` property satisfies the following.

.. math::

   if &\lnot I \land D\\
        &GetIdeal()\\
   if &I \lor \lnot D\\
       &ReturnIdeal()\\

This means that if neither the **domain** nor the **ideal** is set then the ideal will be None so clients for this class can test to see if the ideal is available or not.
   

