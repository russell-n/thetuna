Testing the Convolutions
========================

<<name='imports', echo=False>>=
# python standard library
import unittest
import random

# third-party
import numpy
from mock import MagicMock, patch

# this package
from optimization.tweaks.convolutions import UniformConvolution
@

.. currentmodule:: optimization.components.tests.testconvolutions
.. autosummary::
   :toctree: api

   TestUniformConvolution.test_constructor
   TestUniformConvolution.test_call

<<name='TestUniformConvolution', echo=False>>=
class TestUniformConvolution(unittest.TestCase):
    def setUp(self):
        self.half_range = random.randrange(1, 10)
        self.lower_bound = random.randrange(-10, 10)
        self.upper_bound = random.randrange(self.lower_bound + 1, 20)
        self.convolution = UniformConvolution(half_range=self.half_range,
                                              lower_bound=self.lower_bound,
                                              upper_bound = self.upper_bound)
        return
    
    def test_constructor(self):
        """
        Does it build?
        """
        self.assertEqual(self.half_range, self.convolution.half_range)
        self.assertEqual(self.lower_bound, self.convolution.lower_bound)
        self.assertEqual(self.upper_bound, self.convolution.upper_bound)
        return

    def test_call(self):
        """
        Does it tweak the array it's given?
        """
        test = numpy.array(range(4))
        tweak = numpy.array(range(4))
        expected = numpy.array([1, 2, 4, 5])
        random_mock = MagicMock()
        random_mock.return_value = tweak
        self.convolution.half_range = 2
        self.convolution.lower_bound = 1
        self.convolution.upper_bound = 5

        with patch('numpy.random.uniform', random_mock):            
            actual = self.convolution(test)
        random_mock.assert_called_with(low=-self.convolution.half_range,
                                       high=self.convolution.half_range,
                                       size=4)
        print actual, expected
        self.assertTrue(all(expected== actual))
        return
@
