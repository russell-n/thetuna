The SSH Connection
==================
<<name='license', echo=False>>=
# The MIT License (MIT)
# 
# Copyright (c) 2013 Russell Nakamura
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
@
.. _ssh-connection:

This is the workhorse connection built around the `paramiko` SSHClient. Updates in paramiko's interface as well as a better understanding of how it works has lead me to re-start it as the basis for the other connection types. The main way to use it is meant to be with dot-notation. To do ``ls -a`` for instance, you would do something like::


   connection = SSHConnection(hostname='someip', username='tester')
   opened_files = connection.ls('-a')
   for line in opened_files.output:
       print line

.. '
          
This assumes you have your public keys set up, otherwise you would need to pass in the password to the constructor.

Sometimes people create commands as files with extensions (e.g. ``wifi.sh``) which will mess up the dot-notation, in that case you can pass in the whole thing as a string by calling the connection::

   opened_files = connection('wifi.sh -h')
   for line in opened_files.output:
       print line

   for line in opened_files.error:
       print line

I have also aliased the call with ``exec_command`` so that code that is expecting a paramiko SSHClient can still use it::

    stdin, stdout, stderr = connection.exec_command('iperf -s')


There is also a ``sudo`` method to let you run something as root::

   in_out_error = connection.sudo('nmap -sS "192.168.10.*"', password='testlabs')
   for line in in_out_error.output:
       print line

This is the equivalent of::

   in_out_error = connection('sudo nmap -sS "192.168.10.*"', get_pty=True)
   in_out_error.input.write('testlabs')
   for line in in_out_error.output:
       print line

But I figured it's such a rare thing that I wouldn't be able to remember how to do it when I needed it.

There's also a lock so that if multiple pieces of code are using the same connection they can be thread-safe::

    with connection.lock:
        in_out_error = connection.cat('/proc/cpuinfo')


.. note:: I've integrated a lock into the calls to ``exec_command`` so that it will always be thread-safe (although I think it's better to use multiple clients when possible instead of sharing one instance). This means that you shouldn't need to use the lock as shown above. Using the lock can introduce waiting time for users of the shared client and will make them more brittle (one dead client will kill all the threads using it) so it is only meant to test cases where the device seems to be having trouble with multiple ssh-sessions.
       
<<name='imports', echo=False>>=
# python standard library
from collections import namedtuple
import threading

# third party
import paramiko

# this package
from cameraobscura import BaseClass, CameraobscuraError
@
<<name='constants', echo=False>>=
SEMICOLON_JOIN = "{0};{1}"
SUDO = "sudo {0}"
ADD_NEWLINE = "{0}\n"
SPACE_JOIN = "{0} {1}"
@
<<name='SSHConnection', echo=False>>=
class SSHConnection(BaseClass):
    def __init__(self, hostname, username, prefix=None, password=None, port=22,
                 compress=False, key_filename=None, timeout=None):
        """
        SSHConnection constructor

        :param:

         - `hostname`: the IP address or resolvable host-name
         - `username`: the login username
         - `password`: the password for the device (optional if public-keys set)
         - `prefix`: string to add as a prefix to the commands
         - `port`: the port for the service
         - `compress`: if True, gzip the connection
         - `key_filename`: file-name or list of file-names for public-keys
         - `timeout`: seconds to wait for login before raising a socket.timeout         
        """
        super(SSHConnection, self).__init__()
        self.hostname = hostname
        self.username = username
        self.password = password
        self.prefix = prefix
        self.port = port
        self.compress = compress
        self.key_filename = key_filename
        self.timeout = timeout
        self._client = None
        self._lock = None
        return

    @property
    def client(self):
        """
        an SSHClient instance

        :raise: ApeError for paramiko and socket exceptions
        :rtype: SSHClient
        :return: SSH Client with the constructor's parameters
        """
        if self._client is None:
            self._client = paramiko.SSHClient()
            self._client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            try:
                self._client.connect(hostname=self.hostname,
                                 username=self.username,
                                 port=self.port,
                                 password=self.password,
                                 key_filename=self.key_filename,
                                 compress=self.compress,
                                 timeout=self.timeout)
            except paramiko.PasswordRequiredException as error:
                self.log_error(error)
                raise CameraobscuraError("{u}@{h} Public keys not working".format(u=self.username,
                                                                        h=self.hostname))
            except paramiko.AuthenticationException as error:
                self.log_error(error)
                raise CameraobscuraError("Password: {p} for {u}@{h} not accepted".format(p=self.password,
                                                                               u=self.username,
                                                                               h=self.hostname))
            except paramiko.SSHException as error:
                self.log_error(error)
                raise CameraobscuraError('{u}@{h} with password {p} raised "{e}"'.format(u=self.username,
                                                                               h=self.hostname,
                                                                               p=self.password,
                                                                               e=error))
            except IOError as error:
                self.log_error(error)
                if 'No route to host' in str(error) or 'Network is unreachable' in str(error):
                    raise CameraobscuraError("{h} unreachable from this machine.".format(h=self.hostname))
                if 'Connection refused' in str(error):
                    raise CameraobscuraError("{u}@{h} refused connection (is the ssh-server running?)".format(u=self.username,
                                                                                                     h=self.hostname))
                if 'timed out' in str(error):                    
                    raise CameraobscuraError("Unable to connect to {u}:{h} within {t} seconds (timed out)".format(u=self.username,
                                                                                                        h=self.hostname,
                                                                                                        t=self.timeout))
                raise CameraobscuraError('({e}) connecting to {u}@{h}'.format(e=error,
                                                                     u=self.username,
                                                                     h=self.hostname))

        return self._client

    def sudo(self, command, password, timeout=None):
        """
        A convenience method to hide what's needed to run as root

        :param:

         - `command`: command to run (without the 'sudo' keyword)
         - `password`: the sudoer's password
         - `timeout`: Amount of time to wait for the connection to respond

        :return: InOutError named tuple
        """
        in_out_error = self(SUDO.format(command),
                            get_pty=True)
        in_out_error.input.write(ADD_NEWLINE.format(password))
        return in_out_error


    def __call__(self, command, bufsize=-1, timeout=None, get_pty=False):
        """
        a secondary interface to allow more arbitrary input

        :param:

         - `command`: string with command to send over the ssh-connection
         - `bufsize`: bytes to set for the buffer
         - `timeout`: seconds for channel timeout
         - `get_pty`: needed for interactive things (like sending the sudo password)
        """
        if self.prefix is not None:
            command = SPACE_JOIN.format(self.prefix, command)
        with self.lock:
            stdin, stdout, stderr = self.client.exec_command(command, bufsize=bufsize,
                                                             timeout=timeout,
                                                             get_pty=get_pty)
        return InOutError(input=stdin, output=stdout, error=stderr)

    exec_command = __call__

    def __getattr__(self, command):
        """
        Calls the exec-command

        :param:

         - `command`: command to execute
         - `arguments`: string of arguments to add to the command
         - `bufsize`: buffer size
         - `timeout`: channel timeout
         - `get_pty`: If true sets up the pseudo-terminal
        """
        def procedure_call(arguments='', bufsize=-1, timeout=None, get_pty=False):
            return self(SPACE_JOIN.format(command, arguments), bufsize=bufsize, timeout=timeout, get_pty=get_pty)
        return procedure_call

    @property
    def lock(self):
        """
        A re-entrant lock that threaded users of the connection can use
        """
        if self._lock is None:
            self._lock = threading.RLock()
        return self._lock

    def close(self):
        """
        Closes the connection and sets SSHClient to None
        """
        self.client.close()
        self._client = None
        return
# end class SSHConnection    
@



.. currentmodule:: cameraobscura.SSH.sshconnection
.. autosummary::
   :toctree: api

   SSHConnection
   SSHConnection.client
   SSHConnection.sudo
   SSHConnection.__call__
   SSHConnection.close
   SSHConnection.__getattr__
   SSHConnection.lock

.. uml::

   SSHConnection -|> BaseClass
   SSHConnection o-- paramiko.SSHClient
   SSHConnection o-- SocketStorage
   SSHConnection : sudo(command, password, [timeout=None])
   SSHConnection : __call__(command, [timeout=None, [get_pty=False]])
   SSHConnection : exec_command(command, [timeout=None, [get_pty=False]])
   SSHConnection : __getattr__(command, [timeout, [get_pty=False]])
   SSHConnection o-- threading.RLock

.. _ape-sshconnection-client:

The SSHClient
-------------

Behind the scenes this is mostly a thin adapter for the SSHClient.

.. currentmodule:: paramiko.client
.. autosummary::
   :toctree: api

   SSHClient

And the methods are versions of the `exec_command`.

.. currentmodule:: paramiko.client
.. autosummary::
   :toctree: api

   SSHClient.exec_command

.. _ape-sshconnection-inouterror:
   
The InOutError Named Tuple
--------------------------

To help prevent the mixing up of the different files returned (stdout, stdin, and stderr (not necessarily in that order)) the SSHConnection will returned a named tuple.

<<name='InOutError', echo=False>>=
InOutError = namedtuple('InOutError', 'input output error'.split())
@

.. uml::

   InOutError -|> collections.namedtuple
   InOutError : Storage input
   InOutError : Storage output
   InOutError : Storage error
