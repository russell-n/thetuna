The Command
===========

<<name='imports', echo=False>>=
# python standard library
import re
import socket

# this package
from tuna import TunaError
from tuna import BaseClass
@

.. _command-introduction:

Introduction
------------

This is a building block to execute non-blocking commands and extract data from the output. It's probably not the right choice for things like `iperf` where there is a lot of data (although if you aren't using the ``--interval`` flag it might work).

It is based on :ref:`The Query <query-class-implementation>` (and should be what the Query is using). The idea is to allow users an open-ended way to send commands to the device and get data. It's assumed that this data will then be manipulated in some way -- as opposed to :ref:`The Dump <the-dump-class>` which just dumps the output to a file. To make this possible three things are needed:

.. '

   * The command string
   * An argument string for the command
   * A regular expression to search the output

The argument-string is optional (since the command-string can contain all the options). The regular expressions needs to have a group, denoted with parentheses '()' in python's `regular expression syntax <https://docs.python.org/2/library/re.html#regular-expression-syntax>`_. If no group is put into the regular expression it's assumed that an error was made. 

Additionally, the `Command` will check standard error using a regular expression so that known errors can be used to halt operation (if that's a good idea). To make it easier for the end user the default will be to log the errors but not raise an exception (so the user has to purposefully set the expression for it to actually raise an error).

A final element to consider when using `TheCommand` is whether a socket timeout should raise an exception or not. By default it won't (as noted the inspiration was the `Query` class which is assumed to be less important than the main part of the testing and thus tries not to kill the entire program). If it should be fatal than the `trap_errors` should be set to False (despite the name it will only try to catch socket-based errors).

.. _command-design:

Design Elements
---------------

Use Case
~~~~~~~~

.. uml::

   User -> (Requests output from a command)

Main Path
~~~~~~~~~

   #. send command, arguments, and timeout to the connection
   #. traverse the lines in stdout
   #. search each line with a regular expression
   #. return the first match 
   #. traverse the lines in stderr
   #. search each line with a regular expression
   #. raise an error on match

Alternate Path
~~~~~~~~~~~~~~

   2.1.1. Socket time-out

   2.1.2. if the trap-error flag was set, log the error and quit

   2.1.3. if not, raise an exception

.. _command-constants:

Command Constants
-----------------

A holder of constants for TheCommand.

<<name='CommandConstants'>>=
START_OF_STRING = r'^'
ANYTHING = r'.'
ZERO_OR_MORE = r'*'
GROUP = r'({0})'

EVERYTHING = GROUP.format(ANYTHING + ZERO_OR_MORE)
NOTHING = r'a' + START_OF_STRING
NEWLINE = '\n'
NA = "NA"

class CommandConstants(object):
    """
    Constants for the Command
    """
    __slots__ = ()
    # defaults
    default_arguments = ''
    default_timeout = 5
    default_trap_errors = True
    default_data_expression = EVERYTHING
    default_error_expression = NOTHING
    default_not_available = NA
    command_warning = "Expression: {0} matched no output for command '{1}'"
@

.. _command-socketerrors-decorator:

socketerrors Decorator
----------------------

This is a decorator to handle catching socket errors so the __call__ doesn't get too unwieldy.

.. '

.. currentmodule:: tuna.commands.command
.. autosummary::
   :toctree: api

   socketerrors

<<name='socketerrors', echo=False>>=
def socketerrors(method,  *args, **kwargs):
    """
    Traps errors if self.trap_errors is true, raises TunaErrors otherwise

    also expects that the object has connection,logger, not_available attributes

    :param:

     - `method`: method instance
    """
    def wrapped(self, *args, **kwargs):
        try:
            return method(self, *args, **kwargs)
        except socket.error as error:
            message = "{e}: Error with connection to {c}".format(c=self.connection,
                                                                 e=type(error))
            self.logger.error(message)
            if not self.trap_errors:
                raise TunaError("Problem with connection executing '{0}'".format(self.command_arguments))
            return self.not_available
    return wrapped
@

.. _command-class:

The Command Class
-----------------

.. uml::

   BaseClass <|-- TheCommand
   TheCommand o- TheHost
   TheCommand : String identifier
   TheCommand : String command
   TheCommand : String arguments
   TheCommand : String data_expression
   TheCommand : String error_expression
   TheCommand : Float timeout
   TheCommand : Boolean trap_errors
   TheCommand : String __call__

.. autosummary::
   :toctree: api

   TheCommand
   TheCommand.command
   TheCommand.arguments
   TheCommand.command_arguments
   TheCommand.data_expression
   TheCommand.error_expression
   TheCommand.identifier
   TheCommand.__call__
   

The Command Class is responsible for maintaining a connection, a command and its arguments, and regular expressions to search the output. When called, it sends the command and searches the output, returning matched (group) strings or handles errors depending on how it was configured.

Its main collaborator would be something that looks like one of the clients (hopefully the :ref:`SimpleClient <simpleclient>`) or :ref:`the Host <host-host>` (it will only expect the `exec_command` method).

The Constructor
~~~~~~~~~~~~~~~

The only required arguments are `connection` and `command`. Arguments are optional in the event that the `command` parameter is actual a complete string of `command` + `arguments` (e.g. 'ls -a').

The Call
~~~~~~~~

.. .. figure:: figures/command_activity.svg
..    :align: center
.. 
..    TheCommand's Activity Diagram

.. '
   
<<name='TheCommand', echo=False>>=
class TheCommand(BaseClass):
    """
    Command to get output from a device
    """
    def __init__(self, connection,
                 command,
                 data_expression=None,
                 delimiter=',',
                 error_expression=None,
                 arguments=None,
                 identifier=None,
                 timeout=CommandConstants.default_timeout,
                 trap_errors=CommandConstants.default_trap_errors,
                 not_available=CommandConstants.default_not_available):
        """
        The Command constructor

        :param:

         - `identifier`: string to identify this object
         - `connection`: Connection to send command to
         - `command`: string to send to the connection
         - `data_expression` regular expression to get data from command output
         - `delimiter`: token to separate multiple matching groups
         - `error_expression`: regular expression to match fatal errors
         - `arguments`: string of arguments to add to the command
         - `timeout`: seconds to wait for output from device
         - `trap_errors`: if True, log but don't raise socket errors
         - `not_available`: What to return if data not matched in output
        """
        super(TheCommand, self).__init__()
        self.connection = connection
        self._command = None
        self.command = command
        self._arguments = None
        self.arguments = arguments
        self._data_expression = None
        self.data_expression = data_expression
        self.delimiter = delimiter
        self._error_expression = None
        self.error_expression = error_expression

        self.timeout = timeout
        self._identifier = identifier
        self.trap_errors = trap_errors
        self._command_arguments = None
        self.not_available = not_available
        return

    @property
    def command(self):
        """
        String to send to the connection
        """
        return self._command

    @command.setter
    def command(self, cmd):
        """
        sets the command, resets the command_arguments
        """
        self._command = cmd
        self._command_arguments = None
        return

    @property
    def arguments(self):
        """
        arguments for the command (separated so they can be updated separately)
        """
        return self._arguments

    @arguments.setter
    def arguments(self, args):
        """
        sets the arguments, resets the command_arguments

        :param:

         - `args`: string of arguments for the command or None
        """
        self._arguments = args
        self._command_arguments = None
        return

    @property
    def command_arguments(self):
        """
        A compilation of command and arguments (with newline appended)
        """
        if self._command_arguments is None:
            suffix = NEWLINE
            if self.arguments is not None:
                suffix = " {0}{1}".format(self.arguments, suffix)
            self._command_arguments = "{0}{1}".format(self.command, suffix)
        return self._command_arguments

    @property
    def data_expression(self):
        """
        compiled regular expression to extract data from the command output
        """
        if self._data_expression is None:
            self._data_expression = re.compile(CommandConstants.default_data_expression)
        return self._data_expression

    @data_expression.setter
    def data_expression(self, regex):
        """
        compiles and sets the regular expression

        :param:

         - `regex`: regular expression to get data from the output
        """
        if regex is not None:
            regex = re.compile(regex)
        self._data_expression = regex
        return

    @property
    def error_expression(self):
        """
        regular expression -- if matched, raise Exception
        """
        if self._error_expression is None:
            self._error_expression = re.compile(CommandConstants.default_error_expression)
        return self._error_expression

    @error_expression.setter
    def error_expression(self, regex):
        """
        Compiles and sets the error_expression

        :param:

         - `regex`: regular expression to find fatal errors
        """
        if regex is not None:
            regex = re.compile(regex)
        self._error_expression = regex
        return

    @property
    def identifier(self):
        """
        A string identifier to distinguish this command

         * Uses the first token in the command-string if not set
        """
        if self._identifier is None:
            self._identifier = self.command.split()[0]
        return self._identifier

    @socketerrors
    def __call__(self):
        """
        Sends the command to the connection and extracts data from the output

        :raise: TunaError if data matched but no group found
        """
        stdin, stdout, stderr = self.connection.exec_command(self.command_arguments,
                                                             timeout=self.timeout)
        #data = self.not_available
        #for line in stdout:
        #    self.logger.debug(line)
        #    match = self.data_expression.search(line)
        #    if match:
        #        try:
        #            data = match.groups()[0]
        #        except IndexError as error:
        #            self.logger.error(error)
        #            raise TunaError("Data Expression '{0}' missing group to extract data".format(self.data_expression))
        #        self.logger.debug("Matched: {0}".format(data))
        #        break
        #
        matches = (self.data_expression.search(line) for line in stdout)
        lines = (self.delimiter.join((group for group in match.groups() if group is not None))
                 for match in matches if match is not None)
        data = self.delimiter.join(lines)
        print data
        if not data:
            self.logger.warning(CommandConstants.command_warning.format(self.data_expression.pattern,
                                                                        self.command_arguments.rstrip('\n')))
            data = self.not_available
        elif not data.strip(self.delimiter):
            data = self.not_available
            raise TunaError("Invalid Data Expression: '{0}' missing group to extract data".format(self.data_expression.pattern))
            
        for line in stderr:
            self.logger.error(line)
            if self.error_expression.search(line):
                raise TunaError("Fatal Error: '{0}' running command '{1}1".format(line,
                                                                                  self.command_arguments))
        return data
# end class TheCommand
@
