Coroutines
==========
.. currentmodule:: iperflexer.coroutine

A module for generic coroutines.

<<name='import', echo=False>>=
from types import FileType
@
<<name='constants', echo=False>>=
COMMA = ','
NEWLINE = '\n'
COMMA_JOIN = "{0},{1}"
WRITEABLE = 'w'
@

Coroutine Decorator
--------------------

This is a decorator used to start a coroutine.

.. autosummary::
   :toctree: api

   coroutine

Example Use::

    @coroutine
    def printer(target):
        while True:
            output = (yield)
            print output
            target.send(output)

    @coroutine
    def sink(filename):
        out_file = open(filename, 'w')
        while True:
            output = (yield)
            out_file.write(output)

    s = sink("test.txt")
    p = printer(s)
    for line in output:
        p.send(line)
            
<<name='couroutine', echo=False>>=
def coroutine(func):
    """
    A decorator to start coroutines

    :param:
    
     - `func`: A coroutine function.
    """
    def wrap(*args, **kwargs):
        coroutine_func = func(*args, **kwargs)
        coroutine_func.next()
        return coroutine_func
    return wrap
@

The Broadcast
-------------

A coroutine to send the same input to multiple targets.

.. digraph:: broadcast

   s -> B
   B -> t1
   B -> t2
   B -> t3

Example Use::

    s1 = sink('out_1.txt')
    s2 = processor('out_2.csv')
    b = broadcast((s1, s2))
    p = printer(b)
    for line in source:
        p.send(line)

* Here we re-use `sink` and `printer` from the previous example and assume the existence of a `processor` co-routine that transforms the input to comma-separated-values.

.. autosummary::
   :toctree: api

   broadcast
   
<<name='broadcast', echo=False>>=
@coroutine
def broadcast(targets):
    """
    A coroutine to broadcast input.
    
    :param:

     - `targets`: A list of coroutines to send output to.
    """
    while True:
        line = (yield)
        for target in targets:
            target.send(line)
    return
@

The Comma Join
--------------

This coroutine reads in a number of inputs before joining them with a comma and sending the string down the pipeline.

.. autosummary:: 
   :toctree: api

   comma_join

.. digraph:: comma_join

   source -> processor1
   source -> processor2
   source -> processor3
   processor1 -> comma_join
   processor2 -> comma_join
   processor3 -> comma_join
   comma_join -> target
   
Although not evident from the graph, since this is a couroutine I assume that the processors are always called in the same order if the output needs it.

<<name='comma_join', echo=False>>=
@coroutine
def comma_join(target, input_count):
    """
    This outputs the data in the opposite order that it's received.
    This way the source of the data pipeline is output first.
    
    :param:

     - `target`: A coroutine to send output to.
     - `input_count`: number of inputs before creating line to send.
    """
    inputs = range(input_count)
    while True:
        line = COMMA.join(reversed([(yield) for source in inputs]))
        target.send(line)
    return
@

Output Coroutine
----------------

.. autosummary::
   :toctree: api

   output

.. digraph:: output

   source -> pipeline
   pipeline -> output

The `output` does not take a co-routine as an argument so it has to act as a sink. 
   
<<name='output', echo=False>>=
@coroutine
def output(target_file):    
    """
    Writes input to the target file
    
    :param:

     - `target_file`: A file-like object to write output to.
    """
    while True:
        line = (yield)
        if not line.endswith(NEWLINE):
            line += NEWLINE
        target_file.write(line)
    return
@

Comma Append
------------

Takes a stream of input strings and appends strings sent to it to each string (acting like a zip between a generator and an input stream).

.. autosummary::
   :toctree: api

   comma_append

<<name='comma_append', echo=False>>=
@coroutine
def comma_append(source, target):
    """
    Joins a source stream output and incoming strings with commas

    :param:

     - `source`: iterable of strings
     - `target`: target to send joined strings
    """
    for line in source:
        line_2 = (yield)
        target.send(COMMA_JOIN.format(line.rstrip(NEWLINE), line_2))
    return
@

File Output Coroutine
---------------------

The `file_output` acts much like the ``output`` co-routine but assumes that the target is a disk-file and will create it if passed a string instead of an open file.

<<name='file_output', echo=False>>=
@coroutine
def file_output(file_object):
    """
    Writes strings to a file, making sure there's a newline at the end

    :param:

     - `file_object`: opened, writable file or name of file to open
    """
    if not type(file_object) is FileType:
        file_object = open(file_object, WRITEABLE)
    while True:
        line = (yield)
        line = line.rstrip(NEWLINE) + NEWLINE
        file_object.write(line)
@
