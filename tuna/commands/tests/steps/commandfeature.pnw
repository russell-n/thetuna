Feature: Command execution and data extraction
==============================================
<<name='imports', echo=False>>=
# third party
from behave import given, when, then
from hamcrest import assert_that, equal_to, raises, calling
from mock import MagicMock

# this package
from tuna import TunaError
from tuna.commands.command import TheCommand, CommandConstants
@

.. literalinclude:: ../command.feature
   :language: gherkin

Background: A command is created
--------------------------------

<<name="common_setup", wrap=False>>=
@given("a command is created with a mocked connection")
def setup_command(context):
    context.connection = MagicMock()
    context.command_string = "adb shell iw dev wlan0 link"
    context.command = TheCommand(connection=context.connection,
                                 command=context.command_string,
                                 data_expression="")
    context.logger = MagicMock()
    context.command._logger = context.logger
    return

@

Scenario: Single data group
---------------------------

<<name='single_data_group', wrap=False>>=
@given("the user identified one group in the data expression")
def command_creation(context):
    context.data_expression = r"signal:\s*(-\d+)\s+dBm"
    context.command.data_expression = context.data_expression
    return

@when("the command is executed")
def command_execution(context):
    stdout = """Connected to 10:bd:18:ce:01:42 (on wlan0)
            SSID: allionguest-2.4
            freq: 2437
            signal: -62 dBm
            tx bitrate: 58.5 MBit/s""".split('\n')
    context.connection.exec_command.return_value = (None, stdout, "")
    context.data_actual = context.command()
    return

@then("the call will return a single data-value")
def single_date(context):
    context.data_expected = '-62'
    assert_that(context.data_actual, equal_to(context.data_expected))
    return
@

Scenario: Multiple data groups
------------------------------

<<name='multiple_groups', wrap=False>>=
@given("the user identified multiple groups in the data expression")
def setup_multiple_groups(context):
    data_expression = "bitrate:\s*(\d+\.\d+)\s+[KM]*Bit/s|signal:\s*(-\d+)\s+dBm"
    context.command.data_expression = data_expression
    return

@then("the call will return all the groups as data")
def check_multiple_groups(context):
    expected = "-62,58.5"
    actual = context.data_actual
    assert_that(actual, equal_to(expected))
    return
@

Scenario: No matches are found
------------------------------

<<name='no_matches', wrap=False>>=
@given("the user creates a data_expression that doesn't match any output")
def bad_expression(context):
    context.data_expression = "zvwmaoeusnthlr;cgqjk"
    context.command.data_expression = context.data_expression
    return

@then("the call will return not_available")
def not_available(context):
    assert_that(context.command.not_available, equal_to(context.data_actual))
    return

@then("the logger will warn the user")
def log_warning(context):
    context.logger.warning.assert_called_with(CommandConstants.command_warning.format(context.data_expression,
                                                                                      context.command_string))
    return
@

Scenario: Matches are found but no groups
-----------------------------------------

<<name='no_groups', wrap=False>>=
@given("the user's data_expression doesn't have any groups that match output")
def no_groups(context):
    context.command.data_expression = "signal: | tx bitrate:"
    return

@when("the command is executed and checked with the output")
def do_nothing(context):
    stdout = """Connected to 10:bd:18:ce:01:42 (on wlan0)
            SSID: allionguest-2.4
            freq: 2437
            signal: -62 dBm
            tx bitrate: 58.5 MBit/s""".split('\n')
    context.connection.exec_command.return_value = (None, stdout, "")

    return

@then("a TunaError is raised")
def raise_error(context):
    assert_that(calling(context.command), raises(TunaError))
    return
@

