The Components
==============

.. _the-components:

Contents:

    * :ref:`Introduction <components-introduction>`
    * :ref:`Component Module Diagram <component-module-diagram>`
    * :ref:`The Component Class <component-class>`
    * :ref:`The Composite Class <composite-class>`

.. _components-introduction:
Introduction
------------

This is a module to hold classes that (loosely) implement the `Composite Pattern <http://en.wikipedia.org/wiki/Composite_pattern>`_. See the :ref:`Tuna Plugin <tuna-plugin>` for how the Composites are being used in the `tuna` (it is implemented in the `product` property).

<<name='imports', echo=False>>=
# python standard library
from abc import abstractmethod, ABCMeta
import inspect
import os

# this package
from tuna import BaseClass
from tuna import TunaError

from tuna import RESET
from tuna import BOLD
from tuna.infrastructure.crash_handler import try_except
from tuna import ConfigurationError
from tuna.parts.countdown.countdown import TimeTracker
@
<<name='constants', echo=False>>=
DOCUMENT_THIS = __name__ == '__builtin__'
@


.. _component-class:

The Component Class
-------------------

This is the base-class which the other classes will inherit from. All :ref:`Plugin products <base-plugin-product>` should look like this (it doesn't do much but every method is called at some point by the Composites so all plugin products should implement it).

.. '

.. uml::

   Component -|> BaseClass
   Component : __call__()
   Component : check_rep()
   Component : close()

.. currentmodule:: tuna.components.component
.. autosummary::
   :toctree: api

   Component
   Component.__call__
   Component.check_rep
   Component.close

<<name='Component', echo=False>>=
class Component(BaseClass):
    """
    A base-class for Composite and Leaf
    """
    __metaclass__ = ABCMeta
    def __init__(self):
        """
        Component Constructor
        """
        super(Component, self).__init__()
        self._logger = None
        return

    @abstractmethod
    def __call__(self):
        """
        abstractmethod that will be the main invocation when implememented
        """
        return

    @abstractmethod
    def check_rep(self):
        """
        abstract: Representation-check called by composite

        :raise: ConfigurationError if representation invalid
        """
        return

    @abstractmethod
    def close(self):
        """
        abstractmethod: called for Keyboard Interrupts to allow file-closing
        """
        return        
@



.. _composite-class:

The Composite
-------------

.. uml::

   Composite -|> Component

.. autosummary::
   :toctree: api

   Composite
   Composite.components
   Composite.add
   Composite.remove
   Composite.__call__
   Composite.__iter__
   Composite.__len__
   Composite.__getitem__
   Composite.one_call
   Composite.check_rep
   Composite.close
   Composite.time_remains

The `Composite` was created to be a generalization of the `Hortator`, `Operator` and `Operations`. By specifying the error that it will catch, the error message it will display if there is one, its components, and the component-category of its components, you specify what type of composite it is. It can also act as a regular composite to contain other parts, but this was the original use-case -- to create the infrastructure for the TUNA.

 * Each component call is wrapped by the :ref:`try_except decorator <try-except-decorator>` which catches the Exception in self.error

 * The default for ``self.time_remains`` is a :ref:`TimeTracker <tuna-parts-countdown-timetracker>` but can also be a :ref:`CountdownTimer <tuna-parts-countdown-countdowntimer>`

<<name='Composite', echo=False>>=
class Composite(Component):
    """
    A Composite to hold and execute Components
    """
    def __init__(self, error=None, error_message=None,
                 identifier=None,
                 component_category=None,
                 time_remains=None):
        """
        Composite Constructor

        :param:

         - `error`: Exception to catch when calling components
         - `error_message`: string for header of error messages
         - `component_category`: label for error messages when reporting component actions
         - `identifier`: something to identify this when it starts the call
         - ``time_remains`` - a TimeTracker or CountdownTimer
        """
        super(Composite, self).__init__()
        self.error = error
        self.error_message = error_message
        self.identifier = identifier
        self.component_category = component_category
        self._logger = None
        self._components = None
        self._time_remains = time_remains
        return

    @property
    def components(self):
        """
        The list of components
        """
        if self._components is None:
            self._components = []
        return self._components

    @property
    def time_remains(self):
        """
        :return: TimeTracker (default) or CountdownTimer object
        """
        if self._time_remains is None:
            self._time_remains = TimeTracker()
        return self._time_remains

    @time_remains.setter
    def time_remains(self, countdown):
        """
        Sets the time_remains attribute

        :param:

         - ``countdown``: a CountdownTimer to call
        """
        self._time_remains = countdown
        return

    def add(self, component):
        """
        appends the component to self.components

        :param:

         - `component`: A Component

        :postcondition: component appended to components
        """
        # using is instead of in in case __eq__ overriden
        for existing_component in self.components:
            if component is existing_component:
                return
        self.components.append(component)
        return

    def remove(self, component):
        """
        Removes the component from the components (if it was there)
        """
        try:
            self.components.remove(component)
        except ValueError as error:
            self.logger.debug(error)
        return

    def __iter__(self):
        """
        Iterates over the components
        """
        for component in self.components:
            yield component

    def __len__(self):
        """
        Counts the components

        :return: count of components
        """
        return len(self.components)

    def __getitem__(self, index):
        """
        gets slice or index of components
        """
        return self.components[index]

    @try_except
    def one_call(self, component):
        """
        Calls the  component (pulled out into a method to catch the exceptions)

        :raise:

         - `TunaError` if component is not callable
        """
        if not hasattr(component, '__call__'):
            raise TunaError(("'{0}' has not implemented the __call__ interface. " 
                            "What a way to run a railroad.").format(component.__class__.__name__))
        component()
        return

    def __call__(self):
        """
        The main interface -- starts components after doing a check_rep

        """
        self.logger.debug("{b}** Checking the Composite Class Representation **{r}".format(b=BOLD,
                                                                                          r=RESET))

        self.check_rep()
        count_string = "{b}** {l} {{c}} of {{t}} ('{{o}}') **{r}".format(b=BOLD, r=RESET,
                                                                         l=self.component_category)

        self.logger.info("{b}*** {c} Started ***{r}".format(b=BOLD, r=RESET,
                                                             c=self.identifier))
        
        total_count = len(self.components)
        
        self.logger.info("{b}*** Starting {c} ***{r}".format(b=BOLD, r=RESET,
                                                             c=self.component_category))

        # the use of time-remains is meant to facilitate repeated re-use of the same component calls
        while self.time_remains():
            for count, component in enumerate(self.components):
                self.logger.info(count_string.format(c=count+1,
                                                     t=total_count,
                                                     o=str(component)))                                                 
                self.one_call(component)
            
        self.logger.info("{b}*** {c} Ended ***{r}".format(b=BOLD, r=RESET,
                                                             c=self.identifier))        
        return

    def check_rep(self):
        """
        Checks the representation invariant     

        :raise: ConfigurationError
        """
        try:
            # these checks only make sense when used in the infrastructure
            # at some point this should be generalized somehow so it can act like a
            # composite proper
            assert inspect.isclass(self.error),(
                "self.error must be an exception, not {0}".format(self.error))
            assert issubclass(self.error, Exception),(
                "self.error needs to be an exception, not {0}".format(self.error))
            assert self.error_message is not None, (
                "self.error_message must not be None")
            assert self.component_category is not None, (
                "self.component_category must not be None")

            # check all your children
            for component in self.components:
                if hasattr(component, 'check_rep'):
                    component.check_rep()
                else:
                    self.log_error(error="'{0}' hasn't implemented the 'check_rep' method.".format(component.__class__.__name__),
                                    message="Thanks for the sour persimmons, cousin.")

        except AssertionError as error:
            raise ConfigurationError(str(error))
        return

    def close(self):
        """
        calls the `close` method on each component

        :postcondition: comuponents closed and self.components is None
        """
        for component in self.components:
            if hasattr(component, 'close'):
                component.close()
            else:
                self.logger.warning("'{0}' hasn't implemented the 'close' method. We hate him.".format(component))
        self._components = None
        return

    def __str__(self):
        return ("{2} -- Traps: {0}, "
                "{3} Components: {1}").format(self.error.__name__,
                                         self.component_category,
                                         self.__class__.__name__,
                                         len(self.components))
        
#end class Composite
@


