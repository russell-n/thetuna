The Components
==============

.. _the-components:

Introduction
------------

This is a module to hold classes that (loosely) implement the `Composite Pattern <http://en.wikipedia.org/wiki/Composite_pattern>`_. See the :ref:`Tuna Plugin <tuna-plugin>` for how the Composites are being used in the `tuna` (it is implemented in the `product` property).

<<name='imports', echo=False>>=
# python standard library
from abc import abstractmethod, ABCMeta
import inspect
import os

# this package
from tuna import BaseClass
from tuna import TunaError

from tuna import RESET
from tuna import BOLD
from tuna.infrastructure.crash_handler import try_except
from tuna import ConfigurationError
from tuna.parts.countdown.countdown import TimeTracker
@
<<name='constants', echo=False>>=
DOCUMENT_THIS = __name__ == '__builtin__'
@


.. _component-class:

The BaseComponent Class
-----------------------

This is the base-class which the other classes will inherit from. All :ref:`Plugin products <base-plugin-product>` should look like this (it doesn't do much but every method is called at some point by the Composites so all plugin products should implement it).

.. '

.. uml::

   BaseComponent -|> BaseClass
   BaseComponent : __call__()
   BaseComponent : check_rep()
   BaseComponent : close()

.. currentmodule:: tuna.components.component
.. autosummary::
   :toctree: api

   BaseComponent
   BaseComponent.__call__
   BaseComponent.check_rep
   BaseComponent.close

<<name='BaseComponent', echo=False>>=
class BaseComponent(BaseClass):
    """
    A base-class for Composite and Leaf
    """
    __metaclass__ = ABCMeta
    def __init__(self):
        """
        BaseComponent Constructor
        """
        super(BaseComponent, self).__init__()
        self._logger = None
        return

    @abstractmethod
    def __call__(self):
        """
        abstractmethod that will be the main invocation when implememented
        """
        return

    @abstractmethod
    def check_rep(self):
        """
        abstract: Representation-check called by composite

        :raise: ConfigurationError if representation invalid
        """
        return

    @abstractmethod
    def close(self):
        """
        abstractmethod: called for Keyboard Interrupts to allow file-closing
        """
        return        
@
