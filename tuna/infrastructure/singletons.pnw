The Singletons
==============
<<name='license', echo=False>>=
# The MIT License (MIT)
# 
# Copyright (c) 2013 Russell Nakamura
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
@
This is a module to hold singletons. The (initial) problem it is trying to solve is the need for the plugins to be able to share a common composite without knowing about each other. In earlier incarnations if the APE I did something similar by having the *hortator* hold an object for others to share, but this ended up making the *hortator* large and complicated. The particular first-use will be for watchers which will be registered with a :ref:`Composite <composite-class>` :ref:`Singleton <ape-documentation-exploring-singletons>`.

Setting Up
----------

The first thing to create is the `singletons` dictionary. I originally thought that it would be a `name`: object mapping but I think now it should be a `name`:{`category`:object} mapping so that categories of objects can share the same singleton. I am also creating a `SingletonEnum` to hold the string names for the types of singleton (the `name` in the previous sentence) so that any code that needs to refer to them can do so using dot-notation.

<<name='imports', echo=False>>=
# this package
from tuna import DontCatchError
from tuna.components.component import Composite
from tuna.parts.storage.filestorage import FileStorage
from tuna import FILE_TIMESTAMP
@
<<name='singletons', echo=False>>=
# the singletons will be kept in this dictionary
singletons = {}
@
<<name='enum', echo=False>>=
class SingletonEnum(object):
    """
    A holder for singleton names
    """
    __slots__ = ()
    composite = 'composite'
    filestorage = 'filestorage'
@

.. currentmodule:: ape.commoncode.singletons
.. autosummary::
   :toctree: api

   SingletonEnum   

Get Composite
-------------

The Composite Singleton can be retrieved via the ``get_composite`` method. It takes a name to register the composite being retrieved so that multiple composites can be created (e.g. one composite for watchers, one for tests). Because I'm re-using the :ref:`Composite <composite-class>` meant to create the Ape's infrastructure the composite singleton's need to have an exception and error-message passed in. To avoid interfering with the infrastructure's error-handling I'm going to use a :ref:`DontCatchError <dont-catch-error>` by default so that the Composite will crash if any of its components crashes. In the case of threaded components, this won't work, of course, but we'll se how it goes.

.. '

.. currentmodule:: ape.commoncode.singletons
.. autosummary::
   :toctree: api

   get_composite
   
<<name='get_composite', echo=False>>=
def get_composite(name, error=DontCatchError, error_message=None,
                  identifier=None, component_category='unknown'):
    """
    Gets a Composite Singleton

    :param:

     - `name`: name to register singleton (clients that want same singleton, use same name)
     - `error`: exception to catch (``DontCatchError`` default)
     - `error_message`: message to log on catching the error
     - `identifier`: an identifier for the component (for logging, etc.)
     - `component_category`: classifier for Composite.components

    :return: Composite singleton
    """
    if SingletonEnum.composite not in singletons:
        singletons[SingletonEnum.composite]  = {}
    if name not in singletons[SingletonEnum.composite]:
        if error_message is None:
            error_message = "{0} component error".format(name)
        if identifier is None:
            identifier = name
            
        singletons[SingletonEnum.composite][name] = Composite(error=error,
                                                              error_message=error_message,
                                                              identifier=identifier,
                                                              component_category=component_category)
    return singletons[SingletonEnum.composite][name]
@

Get FileStorage
---------------

The ``get_filestorage`` function gets a :ref:`FileStorage <file-storage-module>` object. The intention is for each Operator Composite to set the path of the File Storage before creating its components, then each of the plugins can just open a file using the singleton. This creates a little bit of a different case from the composites in that if sub-groups are used they are going to need to copy the original file-storage and change its path (assuming the path will be different, which is the only case that I can think of where sub-groups might be useful).

.. currentmodule:: ape.commoncode.singletons
.. autosummary::
   :toctree: api

   get_filestorage
   
<<name='get_filestorage', echo=False>>=
def get_filestorage(name, path=None, 
                    timestamp=FILE_TIMESTAMP):
    """
    Gets a FileStorage Singleton

    :param:

     - `name`: name to register singleton (clients that want same singleton, use same name)

     - `path`: path to prepend to all files (default is current directory)
     - `timestamp`: strftime format to timestamp file-names

    :return: Composite singleton
    """
    if SingletonEnum.filestorage not in singletons:
        singletons[SingletonEnum.filestorage]  = {}
    if name not in singletons[SingletonEnum.filestorage]:
        singletons[SingletonEnum.filestorage][name] = FileStorage(path=path,
                                                                  timestamp=timestamp)
    return singletons[SingletonEnum.filestorage][name]
@

Refresh
-------

The ``refresh`` function clears the ``singletons`` dictionary. It is meant to be called whenever a new operation is created so that the objects from previous operations aren't still being held by the singletons. Since I don't have a use-case for selectively destroying singletons it clears all of them, but you could selectively delete types or categories::

    from ape.commoncode.singletons import singletons, SingletonEnum
    from ape.commoncode.singletons import refresh

    enum = SingletonEnum

    # delete a sub-category called 'test'

    del singletons[enum.composite]['test']

    # delete all the composites

    del singletons[enum.composite]

    # delete all the singletons

    refresh()

.. autosummary::
   :toctree: api

   refresh

<<name='refresh', echo=False>>=
def refresh():
    """
    Clears the `singletons` dictionary
    """
    singletons.clear()
    return
@
