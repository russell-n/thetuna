Testing the Base Class(es)
==========================

<<name='imports', echo=False>>=
# python standard library
import unittest
import logging
import threading

# third-party
from mock import MagicMock, patch

# this package
from tuna.infrastructure.baseclass import BaseClass, BaseThreadClass
@

.. currentmodule:: tuna.infrastructure.tests.testbaseclass
.. autosummary:: 
   :toctree: api

   TestBaseClass.test_constructor
   TestBaseClass.test_logger
   TestBaseThreadClass.test_constructor
   TestBaseThreadClass.test_unimplemented_run
   TestBaseThreadClass.test_implemented_run
   TestBaseThreadClass.test_reset

<<name='TestBaseClass', echo=False>>=
class TestBaseClass(unittest.TestCase):
    def setUp(self):
        self.base = BaseClass()
        return
    
    def test_constructor(self):
        """
        Does it build as expected?
        """
        base = BaseClass()
        return

    def test_logger(self):
        """
        Does it have a python logger attribute?
        """
        self.assertIsInstance(self.base.logger, logging.Logger)

        # what about children?
        class ChildClass(BaseClass):
            pass

        c = ChildClass()
        self.assertIsInstance(c.logger, logging.Logger)

        #What about grand children?
        class GrandChild(ChildClass):
            pass

        g = GrandChild()
        self.assertIsInstance(g.logger, logging.Logger)

        # what if the parent has a constructor?
        class BadParent(BaseClass):
            def __init__(self):
                return

        class ProblemChild(BadParent):
            pass
        
        bp = BadParent()
        pc = ProblemChild()
        with self.assertRaises(AttributeError):
            pc.logger

        class BetterParent(BaseClass):
            def __init__(self):
                super(BetterParent, self).__init__()
                return

        class OtherChild(BetterParent):
            pass

        oc = OtherChild()
        self.assertIsInstance(oc.logger, logging.Logger)
        return
@

<<name='TestBaseThreadClass', echo=False>>=
side_effect = MagicMock()
class GoodChild(BaseThreadClass):
    def __init__(self):
        super(GoodChild, self).__init__()
        return
    def run(self, number):
        side_effect(number)
        return

class TestBaseThreadClass(unittest.TestCase):
    def test_constructor(self):
        """
        Does it build like expected?
        """
        # no, it's abstract
        with self.assertRaises(TypeError):
            base = BaseThreadClass()
        return

    def test_unimplemented_run(self):
        """
        Does it raise an error if the child doesn't implement run?
        """
        class BadChild(BaseThreadClass):
            pass

        with self.assertRaises(TypeError):
            child = BadChild()
        return

    def test_implemented_run(self):
        """
        If `run` is implemented, does the other stuff work?
        """
        gc = GoodChild()

        self.assertIsInstance(gc.logger, logging.Logger)
        self.assertIsInstance(gc.thread, threading.Thread)

        gc.run_thread(5)
        side_effect.assert_called_with(5)

        # check the thread object
        threading_mock = MagicMock()
        thread_mock = MagicMock()
        threading_mock.return_value = thread_mock
        
        gc._thread = None
        with patch('threading.Thread', threading_mock):
            t = gc.thread
        self.assertEqual(t, thread_mock)
        threading_mock.assert_called_with(target=gc.run_thread)
        self.assertTrue(t.daemon)
        return

    def test_reset(self):
        """
        Does it reset the thread?
        """
        test = GoodChild()
        test._thread = 5
        self.assertEqual(5, test.thread)
        test.reset()
        self.assertIsNone(test._thread)
        return
# TestBaseThread    
@
