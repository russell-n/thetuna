The Simulated Annealing Optimizer
=================================
<<name='imports', echo=False>>=
# python standard library
import random
import math

# this package
from tuna.components.component import Component
from tuna import BaseClass, ConfigurationError
@

Contents:

   * :ref:`Background <optimization-optimizers-simulatedannealing-background>`
   * :ref:`Simulated Annealing <optimization-optimizers-simulatedannealing>`
   * :ref:`Temperature Generator <optimization-optimizers-simulatedannealing-temperaturegenerator>`

.. _optimization-optimizers-simulatedannealing-background:
   
Background
----------

This optimizer uses `simulated annealing`, an nature-based approach that uses the annealing process as its model. In annealing, the rate at which a metal is allowed to cool is controlled so that the quality of the metal can be determined. If the metal is cooled rapidly it becomes hard and brittle as the molecules are pulled together tightly by the sudden drop in temperature. If the metal is cooled slowly, it becomes smoother and more pliable as the molecules are given time to arrange themselves in a uniform lattice.

The optimizer simulates annealing by starting with a high 'temperature' which causes it to explore more and then as it cools down it begins to slow its exploration. Specifically, it calculates an entropy value based on the difference between the new candidate and the previous solution and the temperature and then generates a random number which, if it is less that the entropy value, causes the learner to accept the new candidate even if it doesn't do as well as the previous solution.

.. note:: The class itself is called `SimulatedAnnealer` so that I can call the plugin `SimulatedAnnealing`

.. '

.. math::

   entropy = e^{\frac{Quality(C) - Quality(S)}{t}}\\

.. _optimization-optimizers-simulatedannealing:
   
Simulated Annealer
------------------

.. uml::

   Component <|-- SimulatedAnnealer

.. currentmodule:: tuna.optimizers.simulatedannealing
.. autosummary::
   :toctree: api

   SimulatedAnnealer
   SimulatedAnnealer.__call__
   SimulatedAnnealer.solutions

<<name='SimulatedAnnealer', echo=False>>=
class SimulatedAnnealer(Component):
    """
    a Simulated Annealer optimizer
    """
    def __init__(self, temperatures, tweak, quality, candidate, stop_condition,
                 solution_storage=None):
        """
        SimulatedAnnealer Constructor

        :param:

         - `temperatures`: a generator of temperatures
         - `tweak`: callable that tweaks the best solution so far
         - `quality`: Quality checker for candidates
         - `candidate`: initial candidate solution
         - `stop_condition`: a condition to decide to prematurely stop
         - `solution_storage`: a callable to send solutions to
        """
        self.temperatures = temperatures
        self.tweak = tweak
        self.quality = quality
        self.solution = candidate
        self.stop_condition = stop_condition
        self._solutions = solution_storage
        return

    @property
    def solutions(self):
        """
        object with `append` method to save solutions
        """
        if self._solutions is None:
            self._solutions = []
        return self._solutions

    def check_rep(self):
        """
        should validate the parameters
        """
        return

    def close(self):
        """
        closes the quality and solutions' storage
        """
        self.quality.close()
        self.solutions.close()
        return

    def __call__(self):
        """
        Runs the optimization

        :return: last non-None output given
        """
        solution = self.solution
        # prime the data with the first candidate
        self.quality(solution)
        self.solutions.append(solution)
        
        for temperature in self.temperatures:
            candidate = self.tweak(solution)
            
            quality_difference = self.quality(candidate) - self.quality(solution)
            if (quality_difference > 0 or
                random.random() < math.exp(quality_difference/float(temperature))):
                solution = candidate
            if self.quality(solution) > self.quality(self.solution):
                self.solutions.append(solution)
                self.solution = solution
            if self.stop_condition(self.solution):
                break
        return self.solution
# SimulatedAnnealer    
@

.. _optimization-optimizers-simulatedannealing-temperaturegenerator:

Temperature Generator
---------------------

.. currentmodule:: tuna.optimizers.simulatedannealing
.. autosummary::
   :toctree: api

   TemperatureGenerator
   TemperatureGenerator.__iter__

In the algorithm for simulated annealing the temperature drop is called the *temperature schedule*. In the simplest case this can be linear, although if the model is meant to be closer to nature it would need to slow its cooling as it progresses. This generator, then is meant to be a way for the user of the annealer to define how the temperature changes without having to change the annealer itself.

<<name='TemperatureGenerator', echo=False>>=
class TemperatureGenerator(object):
    """
    A class to generate temperature drops for the annealing
    """
    def __init__(self, start, stop=0, schedule=lambda x: x-1):
        """
        TemperatureGenerator constructor

        :param:

         - `start`: starting temperature
         - `stop`: stopping temperature
        """
        self.start = start
        self.stop = stop
        self.schedule = schedule
        return

    def __iter__(self):
        """
        Generates decreasing temperatures

        :yield: next temperature in the schedule
        """
        temperature = self.start
        while temperature >= self.stop:
            yield temperature
            temperature = self.schedule(temperature)
        return
# end class TemperatureGenerator    
@

The TemperatureGenerator assumes that the next temperature is a function of the current temperature, which allows for linear transformations.

.. math::

   T' \gets T - \delta T\\

Or something similar. The next generator instead assumes that the transformations will be a function of the starting temperature (:math:`T_0`) and the time (number of repetitions so far). This makes it easier to do a geometric schedule like the following.

.. math::

   T(t) \gets T_0 \alpha^t\\
   
.. '

Where :math:`0 < \alpha < 1` and :math:`T_0` is the starting temperature. 

To make this work the schedule has to make use of the start time so it will be created as a method instead of a parameter. It will use the geometric progression shown above, to change it monkey patch the `schedule` method.

.. autosummary::
   :toctree: api

   TimeTemperatureGenerator
   TimeTemperatureGenerator.schedule
   TimeTemperatureGenerator.__iter__
   
<<name='TimeTemperatureGenerator', echo=False>>=
class TimeTemperatureGenerator(object):
    """
    A Generator of temperatures using repetitions
    """
    def __init__(self, start, stop, alpha):
        """
        TimeTemperatureGenerator constructor

        :param:

         - `start`: starting temperature (T_0)
         - `stop: stopping temperature
         - `alpha`: constant value used by the schedule
        """
        self.start = start
        self.stop = stop
        self.alpha = alpha
        self.time = -1
        return

    def schedule(self):
        """
        Method that returns the next temperature

        increments self.time and returns next time in geometric progression
        """
        self.time += 1        
        return self.start * self.alpha**self.time

    def __iter__(self):
        """
        Iterator to yield temperatures
        """
        temperature = self.schedule()
        while temperature > self.stop:
            yield temperature
            temperature = self.schedule()
        return

    def close(self):
        """
        Resets the time to -1 so the iterator can be re-used
        """
        self.time = -1
        return
# end TimeTemperatureGenerator    
@

Since it has an alpha value the schedule could be overridden to make a linear descent as well.

.. math::

   T \gets T_0 - \alpha t\\

Where :math:`T_0` is the start temperature (the intercept) and :math:`\alpha` is the rate of change (slope).

TimeTemperatureGenerator Builder
--------------------------------

As a starting point, I'll assume the TimeTemperatureGenerator with the default schedule is being used.

.. '

<<name='TimeTemperatureGeneratorConstants'>>=
# this is for clients so the strings are consistent
class TimeTemperatureGeneratorConstants(object):
    __slots__ = ()
    # the config file needs to be wordier
    # so the option-names are longer
    # options
    start = 'start_temperature'
    stop = 'stop_temperature'
    alpha = 'alpha_temperature'
@

.. autosummary::
   :toctree: api

   TimeTemperatureGeneratorBuilder
   TimeTemperatureGeneratorBuilder.product

<<name='TimeTemperatureGeneratorBuilder'>>=
class TimeTemperatureGeneratorBuilder(BaseClass):
    """
    Builds the TimeTemperatureGenerator from a dictionary
    """
    def __init__(self, configuration, section):
        """
        TimeTemperatureGeneratorBuilder constructor
        
        :param:

         - `configuration`: a configuration map
         - `section`: name of section with options
        """
        super(TimeTemperatureGeneratorBuilder, self).__init__()
        self.configuration = configuration
        self.section = section
        self._product = None
        return

    @property
    def product(self):
        """
        A built time-temperature generator
        """
        if self._product is None:
            constants = TimeTemperatureGeneratorConstants
            config = self.configuration
            try:
                self._product = TimeTemperatureGenerator(start=config.get_float(section=self.section,
                                                                                option=constants.start),
                                                         stop=config.get_float(section=self.section,
                                                                               option=constants.stop),
                                                         alpha=config.get_float(section=self.section,
                                                                                option=constants.alpha))
            except KeyError as error:
                self.logger.error("Missing Option: {0}".format(error))
                raise ConfigurationError("Unable to build the TimeTemperatureGenerator with '{0}'".format(self.configuration))
            except ValueError as error:
                self.logger.error(error)
                self.log_error("Temperature values must be castable to floats")
                raise ConfigurationError("Unable to build the TimeTemperatureGenerator with '{0}'".format(self.configuration))
        return self._product
@

