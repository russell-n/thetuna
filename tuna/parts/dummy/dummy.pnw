The Dummy
=========

This module holds classes to help test the running of the infrastructure.

<<name='imports', echo=False>>=
# python standard library
import time

# this package
from tuna import BaseClass
from tuna import CREATION, ARGS, KWARGS
from tuna import CALLED_ON, CALLED, NOT_IMPLEMENTED

# this module
from callclass import CallClass
@
<<name='check_pweave', echo=False>>=
output_documentation = __name__ == '__builtin__'
@

Dummy Constants
---------------

<<name='DummyConstants'>>=
class DummyConstants(object):
    """
    Constants for using the dummy
    """
    __slots__ = ()
    debug_level = 'debug'
@

.. _dummy-class::

The Dummy Class
---------------

.. currentmodule:: tuna.parts.dummy.dummy
.. _dummy-class:

The Dummy module holds dummy classes that do nothing. They is primarily used to test implementations of infrastructure components.

.. uml::

   DummyClass -|> BaseClass
   DummyClass o- CallClass

.. autosummary::
   :toctree: api

   DummyClass
   DummyClass.__call__
   DummyClass.__str__
   DummyClass.__getattr__

The Dummy Class logs (at the `info`) level when it is created and when it is called.

<<name='DummyClass', echo=False>>=
class DummyClass(BaseClass):
    """
    The Dummy Class does nothing
    """
    def __init__(self, identifier="DummyClass", level='info',
                 *args, **kwargs):
        """
        Dummy class constructor
        """
        super(DummyClass, self).__init__()
        self.level = level
        self.identifier = identifier
        
        self._logger = None
        self._log = None
        self.logger.info(CREATION.format(thing=self))
        self.logger.info(ARGS.format(value=args))
        self.logger.info(KWARGS.format(value=kwargs))

        for name, value in kwargs.items():
            setattr(self, name, value)
        return

    @property
    def log(self):
        """
        A logging method based on the level
        """
        if self._log is None:
            if self.level == 'info':
                self._log = self.logger.info
            else:
                self._log = self.logger.debug
        return self._log
    
    def __call__(self, *args, **kwargs):
        """
        Logs the fact that it was called
        """
        self.log(CALLED.format(thing=self.identifier))
        self.log(ARGS.format(value=args))
        self.log(KWARGS.format(value=kwargs))
        return

    def __str__(self):
        """
        Returns the class name
        """
        return self.__class__.__name__

    def __getattr__(self, attribute):
        """
        To catch unimplemented parts of the class and log them
        """
        self.log(CALLED_ON.format(attribute=attribute,
                                  thing=self.identifier))
        return CallClass(NOT_IMPLEMENTED.format(thing=self),
                         level=self.level)
# end class Dummy    
@

.. _crash-dummy:

A Crash Dummy
-------------

This is a Dummy that raises an error when called.

.. uml::

   CrashDummy -|> DummyClass

.. autosummary::
   :toctree: api

   CrashDummy
   CrashDummy.check_rep
   CrashDummy.close
   CrashDummy.__getattr__

.. note:: check_rep and close don't need to be implemented to crash, but the Composite is checking if it has the attributes before calling them so they have to be implemented to crash them

.. '   

<<name='CrashDummy', echo=False>>=
class CrashDummy(DummyClass):
    """
    A dummy that crashes
    """
    INIT = '__init__'
    CALL = '__call__'
    CHECK_REP = 'check_rep'
    CLOSE = 'close'
    def __init__(self, error, error_message="CrashDummy is crashing.",
                 function=CALL,
                 *args, **kwargs):
        """
        CrashTestDummy Constructor

        :param:

         - `error`: an exception (object) to raise
         - `error_message`: string to pass to error on raising
         - `function`: which function to raise error (__call__, check_rep, close, __init__)
        """
        super(CrashDummy, self).__init__(*args, **kwargs)
        self.error = error
        self.error_message = error_message
        self.function = function
        if function == self.INIT:
            raise error(error_message)
        return

    def check_rep(self):
        """
        crashes on check_rep() if that's the function
        """
        if self.function == self.CHECK_REP:
            raise self.error(self.error_message)
        return

    def close(self):
        """
        Crashes if close is the function
        """
        if self.function == self.CLOSE:
            raise self.error(self.error_message)
        return

    def __call__(self):
        """
        Raises error if self.function is __call__ (this needs to be defined to work)
        """
        if self.function == self.CALL:
            raise self.error(self.error_message)
        return 

    def __getattr__(self, attribute):
        """
        To catch unimplemented parts of the class and log them

        :param:

         - `attribute`: string for attribute not defined elsewhere in the class

        :raise: self.error if attribute == self.function
        """
        self.logger.info(CALLED_ON.format(attribute=attribute,
                                          thing=self))        
        if attribute == self.function:
            raise self.error(self.error_message)
        return CallClass(NOT_IMPLEMENTED.format(thing=self))

# end class CrashDummy        
@

.. _hanging-dummy:

The Hanging Dummy
-----------------

This is a Dummy that will block forever.

.. uml::

   HangingDummy -|> DummyClass

.. autosummary::
   :toctree: api

   HangingDummy
   HangingDummy.__call__
   

<<name='HangingDummy', echo=False>>=
class HangingDummy(DummyClass):
    """
    A dummy that hangs
    """
    def __init__(self, *args, **kwargs):
        super(HangingDummy, self).__init__(*args, **kwargs)
        return

    def __call__(self, *args, **kwargs):
        """
        Sleeps for three years in an infinite loop
        """
        super(HangingDummy, self).__call__(*args, **kwargs)
        while True:
            time.sleep(10**7)
        return
# end class HangingDummy
@

.. dummy-example::

An Example
----------

As an example we can create an operator and make some fake calls to it (I do not think the logging will get captured by Pweave, though).

<<name='test_dummy', wrap=False>>=
if output_documentation:
    class FakeLogger(object):
        def __call__(self, output):
            print output
            
    class KingKong(DummyClass):
        def __init__(self, *args, **kwargs):
            super(KingKong, self).__init__(*args, **kwargs)
            self._log = FakeLogger()
            return
    

    kongs = (KingKong(index, name) for index,name in enumerate('Kong MightyJoe'.split()))
    for kong in kongs:
        kong.rampage()
        kong('fay wray')
@

I had to add a fake logger because pweave does not capture logging output. If you run this module::

    python dummy.py

You should see what is being sent to the logger in full color (without the extra ANSI codes).

<<name='dummy_live', echo=False>>=
if __name__ == '__main__':
    class FakeLogger(object):
        def info(self, output):
            print output
            
    class KingKong(DummyClass):
        def __init__(self, *args, **kwargs):
            super(KingKong, self).__init__(*args, **kwargs)
            self._logger = FakeLogger()
            return    

    kongs = (KingKong(index, name) for index,name in enumerate('Kong MightyJoe'.split()))
    for kong in kongs:
        kong.rampage()
        kong('fay wray')
@
