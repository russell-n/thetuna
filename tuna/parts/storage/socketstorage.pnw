Socket Storage
==============

.. _tuna-socket-storage:

This is a module for classes that implement a file-like interface to a socket. Its main purpose is to catch socket timeout errors.

<<name='imports', echo=False>>=
# python standard library
import os
import socket

# this package
from base_storage import BaseStorage

#from tuna import BaseClass
from tuna import TunaError
@

<<name='constants', echo=False>>=
NEWLINE = '\n'
SPACE = ' '
EOF = ''
IN_PWEAVE = __name__ == '__builtin__'
TIMED_OUT = 'timed out'
@

.. _socket-storage-model:

SocketStorage Model
-------------------

Not all of the methods make sense (like open) so only a sub-set will be implemented. The assumption will be that a file-like object was created elsewhere and passed in to the constructor.

.. uml::

   SocketStorage -|> BaseStorage
   SocketStorage :  __init__(file)
   SocketStorage : close()
   SocketStorage : String read()
   SocketStorage : String readline()
   SocketStorage : List readlines()
   SocketStorage : write(text)
   SocketStorage : writeline(text)
   SocketStorage : writelines(list)
   SocketStorage : closed
   SocketStorage : name
   SocketStorage : __iter__()

.. _socket-storage-api:

SocketStorage API
-----------------

.. currentmodule:: tuna.parts.storage.socketstorage
.. autosummary::
   :toctree: api

   SocketStorage
   SocketStorage.close
   SocketStorage.write
   SocketStorage.writeline
   SocketStorage.writelines
   SocketStorage.readline
   SocketStorage.readlines
   SocketStorage.read
   SocketStorage.__iter__

Although the main reason for this class is to trap socket timeouts when reading lines, it will raise an TunaError when an attempt is made to read the entire buffer (i.e. read readlines) so that if it is really an error to have a timeout, these methods can be used instead. Generally, the main interface is assumed to be the __iter__ method, though, which will catch the timeouts forever, returning the socketstorage.TIMED_OUT string (copying python's socket.timeout message-string).

.. '

<<name='SocketStorage', echo=False>>=
class SocketStorage(BaseStorage):
    """
    A class to store data to a file
    """
    def __init__(self, file_object):
        """
        SocketStorage constructor

        :param:

         - `file_object`: opened file-like socket-based object
        """
        super(SocketStorage, self).__init__()
        self._file = file_object
        self.closed = False
        return

    @property
    def file(self):
        """
        :return: opened file-like object
        """
        return self._file

    def readline(self):
        """
        Calls a single read-line returns 'timed out' if socket.timeout
        """
        try:
            return self.file.readline()
        except socket.timeout:
            self.logger.debug('socket timedout')
            return TIMED_OUT
        
    
    def read(self):
        """
        reads all the output and returns as a single string

        :raise: TunaError if socket times-out
        """
        try:        
            return self.file.read()
        except socket.timeout as error:
            self.logger.debug(TIMED_OUT)
            raise TunaError('Socket Timed Out')
        return

    def readlines(self):
        """
        reads all the output and returns a list of lines

        :raise: TunaError if the socket times out
        """
        try:
            return self.file.readlines()
        except socket.timeout as error:
            self.logger.debug(TIMED_OUT)
            raise TunaError("Socket Timed Out")

    def write(self, text):
        """
        write text to a file

        :param:

         - `text`: text to write to the file

        :raise: TunaError on socket.error
        """
        super(SocketStorage, self).write(text, socket.error)
        return

    def writelines(self, texts):
        """
        write lines to a file (does not add newline character to end of lines)

        :param:

         - `texts`: iterable collection of strings to write to the file

        :raise: TunaError on socket.error (socket closed)
        """
        super(SocketStorage, self).writelines(texts, socket.error)
        

    def __iter__(self):
        """
        Traverses the file

        :yield: next line in the file (or 'timed out' if it times-out)
        """
        line = None
        while line != EOF:
            try:
                line =  self.file.readline()
                yield line
            except socket.timeout:
                self.logger.debug('socket timed out')
                yield TIMED_OUT
        return
    
@


