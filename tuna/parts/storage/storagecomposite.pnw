The Storage Composite
=====================

In order to support multiple output-targets, a Composite will be used to store Storage objects. This is intended to be the main interface for storage. Although it is called a Composite, this differs from the main Composite class used by the Tuna to run the code in that it cannot use the `__call__` method (or it can, but it needs to take arguments).

.. uml::

   StorageComposite -|> BaseClass
   StorageComposite : storages
   StorageComposite : write(text)
   StorageComposite : writelines(lines)
   StorageComposite : close()                    
   StorageComposite : open(name)
   StorageComposite : open_storages
   StorageComposite : add(storage)
   StorageComposite : remove(component)

.. module:: tuna.parts.storage.storagecomposite

.. autosummary::
   :toctree: api

   StorageComposite
   StorageComposite.storages
   StorageComposite.write
   StorageComposite.writelines
   StorageComposite.close
   StorageComposite.open
   StorageComposite.add
   StorageComposite.remove
   check_opened

The ``StorageComposite`` maintains a list of file-like objects and, once ``open`` is called, a list of opened file-like objects.
   
<<name='imports', echo=False>>=
# this package 
from tuna import BaseClass
from tuna import TunaError
@

<<name='check_opened', echo=False>>=
def check_opened(method):
    """
    A decorator to raise an TunaError if the storages aren't opened

    :param:

     - `method` : a method to call if the open_storages is not None

    :raise: TunaError if open_storages is None
    """
    def wrapped(self, *args, **kwargs):
        if self.open_storages is None:
            raise TunaError("storages must be opened before use")
        return method(self, *args, **kwargs)
    return wrapped            
@
<<name='StorageComposite', echo=False>>=
class StorageComposite(BaseClass):
    """
    A composite for storages
    """
    def __init__(self):
        self._storages = None
        self.open_storages = None
        return

    @property
    def storages(self):
        """
        A list of storage objects
        """
        if self._storages is None:
            self._storages = []
        return self._storages

    def add(self, storage):
        """
        Adds the storage to the list of storages

        :param:

         - `storage`: a configured storage
        """
        if storage not in self.storages:         
            self.storages.append(storage)
        return

    def remove(self, storage):
        """
        removes the storage from self.storages

        :param:

         - `storage`: The object instance to remove
        """
        try:
            self.storages.remove(storage)
        except ValueError as error:
            self.log_error(error)
        return

    @check_opened
    def write(self, line):
        """
        Writes the line to storage

        :param:

         - `line`: a string to write to storage

        :raise: TunaError if storages not opened
        """
        for storage in self.open_storages:
            storage.write(line)
        return

    @check_opened
    def writelines(self, lines):
        """
        writes lines to opened_storages

        :param:

         - `lines`: collection of lines to send to storage

        :raise: TunaError if storages not opened
        """
        for storage in self.open_storages:
            storage.writelines(lines)
        return

    def open(self, name):
        """
        opens all the storages with `name` and puts opened storage in opened_storage

        :param:

         - `name`: name to give opened file
        """
        self.open_storages = [storage.open(name) for storage in self.storages]
        return

    def close(self):
        """
        Closes any opened storages, sets open_storages to None
        """
        if self.open_storages is not None:
            for storage in self.open_storages:
                storage.close()
            self.open_storages = None
        return
@

   

