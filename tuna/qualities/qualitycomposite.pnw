Quality Composite
=================

This is a composite with the call overriden so that it takes arguments and passes them to the components and then retrieves an output and returns it. This assumes that the components take arguments, and can filter out what they need, which is different from the default Component definition. This was implemented so that the composite can pass along tweaked candidates to the components that know what to do with them. This requires that the creator of components for this composite be careful to not have conflicting parameter names, that all components take arguments, even if they don't use them, and that only one of the components returns a valid output (because that is all that will be returned). Additionally, unless only one component takes arguments (and even in that case) it will be safer for the caller of the composite to use keyword arguments only.

.. '

The Quality Composite
---------------------

<<name='imports', echo=False>>=
# this package
from tuna.components.composite import Composite
from tuna.infrastructure.quartermaster import QuarterMaster
from tuna import DontCatchError, MODULES_SECTION
@

.. uml::

   Composite <|-- QualityComposite
   Composite : __call__(*args, **kwargs)

.. currentmodule:: tuna.qualities.qualitycomposite
.. autosummary::
   :toctree: api

   QualityComposite
   QualityComposite.__call__

<<name='QualityComposite', echo=False>>=
class QualityComposite(Composite):
    """
    A quality for the optimizer
    """
    def __init__(self, *args, **kwargs):
        super(QualityComposite, self).__init__(*args, **kwargs)
        self.quality_checks = 0
        return
    
    def __call__(self, *args, **kwargs):
        """
        Calls the components, passing along the arguments

        :return: last output from the components not None
        """
        # since the quality-components are buried in a list
        # this is here to help see how efficient the optimizers are
        self.quality_checks += 1
        output = None
        for component in self.components:
            returned = component(*args, **kwargs)
            if returned is not None:
                output = returned
        return output

    def reset(self):
        """
        Resets the quality-checks
        """
        super(QualityComposite, self).reset()
        self.quality_checks = 1
        return
# end QualityComposite    
@

Quality Composite Builder
-------------------------

A convenience class to build quality composites. Builders are turning out to be light-weight versions of plugins (no help for the user).

.. currentmodule:: tuna.qualities.qualitycomposite
.. autosummary::
   :toctree: api

   QualityCompositeBuilder
   QualityCompositeBuilder.product


<<name='QualityCompositeBuilder'>>=
class QualityCompositeBuilder(object):
    """
    A builder of quality-composites
    """
    def __init__(self, configuration, section_header):
        """
        QualityCompositeBuilder constructor

        :param:

         - `configuration`: configuration map with options to build this thing
         - `section_header`: section in the configuration with values needed
        """
        self.configuration = configuration
        self.section_header = section_header
        self._product = None
        return

    @property
    def product(self):
        """
        A built Quality Composite
        """
        if self._product is None:
            quartermaster = QuarterMaster(name='components')
            self._product = QualityComposite(error=DontCatchError,
                                      error_message="Component has failed.",
                                      component_category='quality')
            defaults = self.configuration.defaults
            external_modules = [option for option in self.configuration.options(MODULES_SECTION)
                                 if option not in defaults]
            quartermaster.external_modules = external_modules
            for component_section in self.configuration.get_list(section=self.section_header,
                                                                 option='components'):
                component_name = self.configuration.get(section=component_section,
                                                        option='component',
                                                        optional=False)
                component_def = quartermaster.get_plugin(component_name)
                component = component_def(self.configuration,
                                          component_section).product
                self._product.add(component)
            if not len(self._product.components):
                raise ConfigurationError("Unable to build quality components using 'components={0}'".format(self.section_header,
                                                                                                            option='components'))
        return self._product
@
